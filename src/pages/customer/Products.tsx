import React, { useState, useEffect } from 'react';
import { useData, OrderItem, PaymentMethod, PaymentStatus, OrderStatus } from '@/contexts/DataContext';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { toast } from 'sonner';
import { ShoppingCart, PlusCircle, MinusCircle, Trash2 } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

const ProductsPage = () => {
  const { products, addOrder } = useData();
  const { user } = useAuth();
  const [cart, setCart] = useState<any[]>(() => {
    // Get cart from local storage on component mount
    const storedCart = localStorage.getItem('cart');
    return storedCart ? JSON.parse(storedCart) : [];
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [placingOrder, setPlacingOrder] = useState(false);
  const navigate = useNavigate();

  // Settings values
  const minOrderAmount = 10;

  useEffect(() => {
    // Save cart to local storage whenever it changes
    localStorage.setItem('cart', JSON.stringify(cart));
  }, [cart]);

  const addToCart = (product: any) => {
    const existingItem = cart.find(item => item.product.id === product.id);
    if (existingItem) {
      const updatedCart = cart.map(item =>
        item.product.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
      );
      setCart(updatedCart);
    } else {
      setCart([...cart, { product: product, quantity: 1 }]);
    }
  };

  const removeFromCart = (product: any) => {
    const updatedCart = cart.filter(item => item.product.id !== product.id);
    setCart(updatedCart);
  };

  const increaseQuantity = (product: any) => {
    const updatedCart = cart.map(item =>
      item.product.id === product.id ? { ...item, quantity: item.quantity + 1 } : item
    );
    setCart(updatedCart);
  };

  const decreaseQuantity = (product: any) => {
    const updatedCart = cart.map(item =>
      item.product.id === product.id ? { ...item, quantity: Math.max(1, item.quantity - 1) } : item
    );
    setCart(updatedCart);
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + item.product.price * item.quantity, 0);
  };

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const placeOrder = async () => {
    if (!user) {
      toast.error("You must be logged in to place an order");
      return;
    }

    if (cart.length === 0) {
      toast.error("Your cart is empty");
      return;
    }

    try {
      setPlacingOrder(true);

      // Calculate total amount
      const total = calculateTotal();

      if (total < minOrderAmount) {
        toast.error(`Minimum order amount is $${minOrderAmount}`);
        return;
      }

      // Prepare order items
      const orderItems: OrderItem[] = cart.map(item => ({
        id: '', // Will be generated by the database
        order_id: '', // Will be filled later
        product_id: item.product.id,
        quantity: item.quantity,
        price_at_order: item.product.price,
        created_at: new Date().toISOString(),
        product: item.product
      }));

      // Create order object
      const orderData = {
        customer_id: user.id,
        user_id: user.id, // Add this to match the expected type
        items: orderItems,
        total_amount: total,
        payment_method: 'cash' as PaymentMethod,
        payment_status: 'pending' as PaymentStatus,
        status: 'pending' as OrderStatus,
        delivery_address: user.address || '',
        notes: ''
      };

      const order = await addOrder(orderData);

      if (order) {
        setCart([]);
        localStorage.removeItem('cart');
        toast.success("Order placed successfully");
        navigate('/customer/orders');
      } else {
        toast.error("Failed to place order");
      }
    } catch (error) {
      console.error("Error placing order:", error);
      toast.error("Failed to place order");
    } finally {
      setPlacingOrder(false);
    }
  };

  return (
    <div className="container mx-auto mt-8">
      <h1 className="text-2xl font-bold mb-4">Products</h1>

      {/* Search Input */}
      <div className="mb-4">
        <Label htmlFor="search">Search Products:</Label>
        <Input
          type="text"
          id="search"
          placeholder="Enter product name"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="mt-1"
        />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredProducts.map((product) => (
          <Card key={product.id}>
            <CardContent className="p-4">
              <img src={product.image_url} alt={product.name} className="w-full h-48 object-cover mb-4" />
              <h2 className="text-lg font-semibold">{product.name}</h2>
              <p className="text-gray-600">${product.price}</p>
              <Button onClick={() => addToCart(product)} className="mt-4 w-full">
                <PlusCircle className="mr-2 h-4 w-4" />
                Add to Cart
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Shopping Cart */}
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4">
          <ShoppingCart className="mr-2 h-5 w-5 inline-block" />
          Shopping Cart
        </h2>
        {cart.length === 0 ? (
          <p>Your cart is empty.</p>
        ) : (
          <div className="space-y-3">
            {cart.map((item) => (
              <div key={item.product.id} className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <img src={item.product.image_url} alt={item.product.name} className="w-12 h-12 object-cover rounded" />
                  <div>
                    <h3 className="font-semibold">{item.product.name}</h3>
                    <p className="text-gray-600">Price: ${item.product.price}</p>
                    <div className="flex items-center space-x-2">
                      <Button variant="outline" size="icon" onClick={() => decreaseQuantity(item.product)}>
                        <MinusCircle className="h-4 w-4" />
                      </Button>
                      <span>Quantity: {item.quantity}</span>
                      <Button variant="outline" size="icon" onClick={() => increaseQuantity(item.product)}>
                        <PlusCircle className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
                <div>
                  <Button variant="destructive" size="icon" onClick={() => removeFromCart(item.product)}>
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
            <div className="font-bold text-lg">Total: ${calculateTotal()}</div>
            {calculateTotal() < minOrderAmount && (
              <p className="text-red-500">
                Minimum order amount is ${minOrderAmount}. Please add more items.
              </p>
            )}
            <Button
              className="w-full"
              onClick={placeOrder}
              disabled={placingOrder || calculateTotal() < minOrderAmount}
            >
              {placingOrder ? 'Placing Order...' : 'Place Order'}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProductsPage;
