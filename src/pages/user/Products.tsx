import React, { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useData, Product, OrderItem, OrderStatus, PaymentMethod, PaymentStatus } from '@/contexts/DataContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import { useNavigate } from 'react-router-dom';
import { Loader2 } from 'lucide-react';

interface ShippingInfo {
  address: string;
  notes: string;
}

// Create a CartItem interface to properly handle quantity
interface CartItem extends Product {
  quantity: number;
}

const ProductsPage = () => {
  const { user } = useAuth();
  const { products, getProductById, addOrder } = useData();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [shippingInfo, setShippingInfo] = useState<ShippingInfo>({ address: '', notes: '' });
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    // Load cart items from local storage on component mount
    const storedCart = localStorage.getItem('cart');
    if (storedCart) {
      setCartItems(JSON.parse(storedCart));
    }
  }, []);

  useEffect(() => {
    // Save cart items to local storage whenever cart changes
    localStorage.setItem('cart', JSON.stringify(cartItems));
  }, [cartItems]);

  const addToCart = (product: Product) => {
    // Convert Product to CartItem with quantity property
    const cartItem: CartItem = {
      ...product,
      quantity: 1
    };
    setCartItems([...cartItems, cartItem]);
    toast.success(`${product.name} added to cart!`);
  };

  const removeFromCart = (productId: string) => {
    const updatedCart = cartItems.filter(item => item.id !== productId);
    setCartItems(updatedCart);
    toast.success('Item removed from cart.');
  };

  const clearCart = () => {
    setCartItems([]);
    toast.success('Cart cleared.');
  };

  const updateQuantity = (productId: string, quantity: number) => {
    if (quantity < 0) return;
  
    const product = getProductById(productId);
    if (!product) {
      toast.error('Product not found');
      return;
    }
  
    if (quantity > (product.stock_quantity || 0)) {
      toast.error('Quantity exceeds available stock');
      return;
    }
  
    setCartItems(prevCartItems =>
      prevCartItems.map(item =>
        item.id === productId ? { ...item, quantity: quantity } : item
      )
    );
  };

  const subtotal = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
  const deliveryFee = 5;

  const handleShippingChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setShippingInfo({ ...shippingInfo, [e.target.name]: e.target.value });
  };

  const handlePaymentMethodChange = (method: PaymentMethod) => {
    setPaymentMethod(method);
  };

  // Update the handleCheckout method to include user_id and fix OrderItem structure
  const handleCheckout = async () => {
    if (!user) {
      toast.error('You must be logged in to checkout.');
      navigate('/login');
      return;
    }

    if (cartItems.length === 0) {
      toast.error('Your cart is empty.');
      return;
    }

    if (!shippingInfo.address.trim()) {
      toast.error('Please enter a shipping address.');
      return;
    }

    setIsSubmitting(true);
    try {
      const newOrder = await addOrder({
        customer_id: user.id,
        user_id: user.id,
        items: cartItems.map(item => ({
          product_id: item.id,
          quantity: item.quantity,
          price_at_order: item.price,
          id: '', // These will be generated by the backend
          order_id: '', // These will be filled later
          created_at: new Date().toISOString() // Add required created_at field
        })),
        total_amount: subtotal + deliveryFee,
        payment_method: paymentMethod || 'cash',
        payment_status: 'pending',
        status: 'pending',
        delivery_address: user?.address || shippingInfo.address,
        notes: shippingInfo.notes || ""
      });

      if (newOrder) {
        toast.success('Order placed successfully!');
        clearCart();
        setShippingInfo({ address: '', notes: '' });
        setPaymentMethod(null);
        navigate('/customer/orders');
      } else {
        toast.error('Failed to place order.');
      }
    } catch (error) {
      console.error('Checkout error:', error);
      toast.error('An error occurred during checkout.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-4">Products</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {products.map(product => (
          <Card key={product.id}>
            <CardHeader>
              <CardTitle>{product.name}</CardTitle>
              <CardDescription>{product.description}</CardDescription>
            </CardHeader>
            <CardContent>
              <p>Price: ${product.price}</p>
              <Button onClick={() => addToCart(product)}>Add to Cart</Button>
            </CardContent>
          </Card>
        ))}
      </div>

      <h2 className="text-xl font-bold mt-8 mb-4">Shopping Cart</h2>
      {cartItems.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {cartItems.map(item => (
              <Card key={item.id}>
                <CardHeader>
                  <CardTitle>{item.name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p>Price: ${item.price}</p>
                  <div className="flex items-center space-x-2">
                    <Label htmlFor={`quantity-${item.id}`}>Quantity:</Label>
                    <Input
                      type="number"
                      id={`quantity-${item.id}`}
                      value={item.quantity}
                      min="1"
                      onChange={(e) => updateQuantity(item.id, parseInt(e.target.value))}
                      className="w-20"
                    />
                  </div>
                  <Button onClick={() => removeFromCart(item.id)}>Remove</Button>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="mt-4">
            <h3 className="text-lg font-bold">Subtotal: ${subtotal}</h3>
            <h3 className="text-lg font-bold">Delivery Fee: ${deliveryFee}</h3>
            <h3 className="text-lg font-bold">Total: ${subtotal + deliveryFee}</h3>
          </div>

          <div className="mt-4">
            <h3 className="text-lg font-bold">Shipping Information</h3>
            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <Input
                type="text"
                id="address"
                name="address"
                value={shippingInfo.address}
                onChange={handleShippingChange}
                placeholder="123 Main St"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="notes">Notes</Label>
              <Input
                type="textarea"
                id="notes"
                name="notes"
                value={shippingInfo.notes}
                onChange={handleShippingChange}
                placeholder="Delivery instructions"
              />
            </div>
          </div>

          <div className="mt-4">
            <h3 className="text-lg font-bold">Payment Method</h3>
            <div className="flex space-x-4">
              <Button variant={paymentMethod === 'cash' ? 'default' : 'outline'} onClick={() => handlePaymentMethodChange('cash')}>
                Cash on Delivery
              </Button>
              <Button variant={paymentMethod === 'upi' ? 'default' : 'outline'} onClick={() => handlePaymentMethodChange('upi')}>
                UPI
              </Button>
            </div>
          </div>

          <div className="mt-4">
            <Button 
              onClick={handleCheckout} 
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Placing Order...
                </>
              ) : (
                'Checkout'
              )}
            </Button>
            <Button variant="secondary" onClick={clearCart} className="ml-2">Clear Cart</Button>
          </div>
        </>
      )}
    </div>
  );
};

export default ProductsPage;
